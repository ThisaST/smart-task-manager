services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: task-manager-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: task_manager_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - task-manager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d task_manager_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js API (Development)
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: task-manager-api-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/task_manager_dev
      PORT: 3001
      API_PREFIX: /api
      CORS_ORIGIN: http://localhost:3000
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      LOG_LEVEL: info
      BCRYPT_ROUNDS: 12
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "3002:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - task-manager-network
    command: ["sh", "-c", "npx prisma generate && npx prisma db push && npm run dev"]

  # Node.js API (Production)
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: task-manager-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/task_manager_dev
      PORT: 3001
      API_PREFIX: /api
      CORS_ORIGIN: http://localhost:3000
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      LOG_LEVEL: info
      BCRYPT_ROUNDS: 12
    ports:
      - "3002:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - task-manager-network
    command: ["sh", "-c", "npx prisma generate && npx prisma db push && node dist/app.js"]
    profiles:
      - production

  # pgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: task-manager-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@taskmanager.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - task-manager-network
    profiles:
      - tools

networks:
  task-manager-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local 